; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27030.1 

	TITLE	C:\Users\Raiden\Desktop\CS342 Lab Material\Kamal_Faheem_TakeHomeTest3\Kamal_Faheem_Code\TakeHomeTest\TakeHomeTest\TakeHomeTest.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__79C743C3_pch@h DB 01H
__F7F0546A_takehometest@pch DB 01H
__8C1AAD0E_takehometest@cpp DB 01H
msvcjmc	ENDS
PUBLIC	?dot_product@@YAHQAH0H@Z			; dot_product
PUBLIC	__JustMyCode_Default
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\raiden\desktop\cs342 lab material\kamal_faheem_takehometest3\kamal_faheem_code\takehometest\takehometest\takehometest.cpp
;	COMDAT ?dot_product@@YAHQAH0H@Z
_TEXT	SEGMENT
_i$1 = -20						; size = 4
_dp$ = -8						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_size$ = 16						; size = 4
?dot_product@@YAHQAH0H@Z PROC				; dot_product, COMDAT

; 3    : int dot_product(int a[], int b[], int size) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __8C1AAD0E_takehometest@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 4    : 	int dp = 0;

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _dp$[ebp], 0

; 5    : 
; 6    : 	//#pragma loop(no_vector)
; 7    : 	#pragma loop(hint_parallel(0))
; 8    : 	for (int i = 0; i < size; i++) {

  0002f	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00036	eb 09		 jmp	 SHORT $LN4@dot_produc
$LN2@dot_produc:
  00038	8b 45 ec	 mov	 eax, DWORD PTR _i$1[ebp]
  0003b	83 c0 01	 add	 eax, 1
  0003e	89 45 ec	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@dot_produc:
  00041	8b 45 ec	 mov	 eax, DWORD PTR _i$1[ebp]
  00044	3b 45 10	 cmp	 eax, DWORD PTR _size$[ebp]
  00047	7d 20		 jge	 SHORT $LN1@dot_produc

; 9    : 		dp = dp + ((a[i])*(b[i]));

  00049	8b 45 ec	 mov	 eax, DWORD PTR _i$1[ebp]
  0004c	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  0004f	8b 55 ec	 mov	 edx, DWORD PTR _i$1[ebp]
  00052	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  00055	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00058	0f af 04 96	 imul	 eax, DWORD PTR [esi+edx*4]
  0005c	03 45 f8	 add	 eax, DWORD PTR _dp$[ebp]
  0005f	89 45 f8	 mov	 DWORD PTR _dp$[ebp], eax

; 10   : 		return dp;

  00062	8b 45 f8	 mov	 eax, DWORD PTR _dp$[ebp]
  00065	eb 02		 jmp	 SHORT $LN1@dot_produc

; 11   : 	}

  00067	eb cf		 jmp	 SHORT $LN2@dot_produc
$LN1@dot_produc:

; 12   : }

  00069	5f		 pop	 edi
  0006a	5e		 pop	 esi
  0006b	5b		 pop	 ebx
  0006c	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00072	3b ec		 cmp	 ebp, esp
  00074	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c3		 ret	 0
?dot_product@@YAHQAH0H@Z ENDP				; dot_product
_TEXT	ENDS
END
